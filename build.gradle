
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.dm.gradle:gradle-bundle-plugin:0.8.2'
    }
}

subprojects {

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
  }

  apply plugin: "java"
  apply plugin: 'org.dm.bundle'  

  group = 'com.github.ralfstuckert.pdfbox-layout'
  version = '1.0.1'

  repositories {
      mavenCentral()
  }

  dependencies {
    compile files("build/classes/main")
    compile files("examples")   
  }

  bundle {
    instruction 'Export-Package', 'rst.pdfbox.layout.*;-split-package:=merge-first' 
    instruction 'Import-Package', "!rst.pdfbox.layout.*,*"
    instruction 'Bundle-Name', project.name
    instruction 'Bundle-SymbolicName', "${project.group}.${project.name}"
  }
  
  jar {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
  }
  
  javadoc {
    failOnError = false
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  task examplesJar(type: Jar, dependsOn: [jar, 'createExamples'] ) {
    classifier = 'examples'
    from fileTree("examples")
    include '**/*'
  }
  
  artifacts {
    archives sourcesJar
    archives javadocJar
    archives examplesJar
  }

  
  task createExamples(description: 'Creates the example pdfs', dependsOn: 'compileExamples' ) << {
    def oldPdfs = fileTree("examples").include('**/*.pdf')
    oldPdfs.each { file -> file.delete() }
    def examples = fileTree("examples").exclude('**/*.java')
    examples.each { example ->
  	  def mainClassName = getClassName(example)
  	  if (mainClassName) {
         javaexec {
            main = mainClassName
            classpath = sourceSets.main.compileClasspath
            workingDir = "$projectDir/examples"
         }
      }
    }
    
    def classFiles = fileTree("examples").include('**/*.class')
    classFiles.each { file -> file.delete() }
  }


  task compileExamples(type: JavaCompile, dependsOn: 'compileJava') {
    source = fileTree(dir: "examples", include: '**/*.java')
    destinationDir = file("examples")
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
    dependencyCacheDir = file("${buildDir}/dependency-cache")
    classpath = sourceSets.main.compileClasspath
  }

}


def getClassName(classFile) {
	def name = classFile.getName();
	if (name.contains('$') || !name.endsWith('.class')) {
	  return null
	}
	name = name.substring(0, name.lastIndexOf("."))
	return name
}




